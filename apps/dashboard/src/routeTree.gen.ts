/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ForgotPasswordImport } from './routes/forgot-password'
import { Route as DatatableImport } from './routes/datatable'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as ResetPasswordTokenImport } from './routes/reset-password.$token'
import { Route as ProtectedTodosImport } from './routes/_protected/todos'
import { Route as ProtectedCategoriesImport } from './routes/_protected/categories'
import { Route as AuthSignUpImport } from './routes/_auth/sign-up'
import { Route as AuthSignInImport } from './routes/_auth/sign-in'

// Create/Update Routes

const ForgotPasswordRoute = ForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const DatatableRoute = DatatableImport.update({
  id: '/datatable',
  path: '/datatable',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordTokenRoute = ResetPasswordTokenImport.update({
  id: '/reset-password/$token',
  path: '/reset-password/$token',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedTodosRoute = ProtectedTodosImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedCategoriesRoute = ProtectedCategoriesImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => ProtectedRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/datatable': {
      id: '/datatable'
      path: '/datatable'
      fullPath: '/datatable'
      preLoaderRoute: typeof DatatableImport
      parentRoute: typeof rootRoute
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthImport
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof AuthImport
    }
    '/_protected/categories': {
      id: '/_protected/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof ProtectedCategoriesImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/todos': {
      id: '/_protected/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof ProtectedTodosImport
      parentRoute: typeof ProtectedImport
    }
    '/reset-password/$token': {
      id: '/reset-password/$token'
      path: '/reset-password/$token'
      fullPath: '/reset-password/$token'
      preLoaderRoute: typeof ResetPasswordTokenImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ProtectedRouteChildren {
  ProtectedCategoriesRoute: typeof ProtectedCategoriesRoute
  ProtectedTodosRoute: typeof ProtectedTodosRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedCategoriesRoute: ProtectedCategoriesRoute,
  ProtectedTodosRoute: ProtectedTodosRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/datatable': typeof DatatableRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/categories': typeof ProtectedCategoriesRoute
  '/todos': typeof ProtectedTodosRoute
  '/reset-password/$token': typeof ResetPasswordTokenRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/datatable': typeof DatatableRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/categories': typeof ProtectedCategoriesRoute
  '/todos': typeof ProtectedTodosRoute
  '/reset-password/$token': typeof ResetPasswordTokenRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/datatable': typeof DatatableRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/_protected/categories': typeof ProtectedCategoriesRoute
  '/_protected/todos': typeof ProtectedTodosRoute
  '/reset-password/$token': typeof ResetPasswordTokenRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/datatable'
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/categories'
    | '/todos'
    | '/reset-password/$token'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/datatable'
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/categories'
    | '/todos'
    | '/reset-password/$token'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected'
    | '/datatable'
    | '/forgot-password'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/_protected/categories'
    | '/_protected/todos'
    | '/reset-password/$token'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
  DatatableRoute: typeof DatatableRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  ResetPasswordTokenRoute: typeof ResetPasswordTokenRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
  DatatableRoute: DatatableRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  ResetPasswordTokenRoute: ResetPasswordTokenRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_protected",
        "/datatable",
        "/forgot-password",
        "/reset-password/$token"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/sign-in",
        "/_auth/sign-up"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/categories",
        "/_protected/todos"
      ]
    },
    "/datatable": {
      "filePath": "datatable.tsx"
    },
    "/forgot-password": {
      "filePath": "forgot-password.tsx"
    },
    "/_auth/sign-in": {
      "filePath": "_auth/sign-in.tsx",
      "parent": "/_auth"
    },
    "/_auth/sign-up": {
      "filePath": "_auth/sign-up.tsx",
      "parent": "/_auth"
    },
    "/_protected/categories": {
      "filePath": "_protected/categories.tsx",
      "parent": "/_protected"
    },
    "/_protected/todos": {
      "filePath": "_protected/todos.tsx",
      "parent": "/_protected"
    },
    "/reset-password/$token": {
      "filePath": "reset-password.$token.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
